{"version":3,"sources":["components/card/card-components.jsx","components/card-list/card-list.components.jsx","components/search-box/search-box-components.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monster","id","name","children","email","CardList","console","log","map","key","SearchBox","placeholder","handlechange","type","onChange","App","state","greeting","monsters","searchvalue","fetch","then","response","json","users","setState","this","filteredMonster","filter","toLowerCase","includes","e","target","value","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2TAGaA,G,YAAO,SAAAC,GAChB,OAAO,yBAAKC,UAAU,kBAClB,yBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACR,gCAAMJ,EAAMG,QAAQE,KAApB,IAA2BL,EAAMM,SAAjC,OACA,2BAAIN,EAAMG,QAAQI,UCHbC,EAAW,SAAAR,GAKpB,OAJAS,QAAQC,IAAIV,GAIL,yBAAKC,UAAU,aAElBD,EAAMG,QAAQQ,IAAK,SAAAR,GAAO,OAC1B,kBAAC,EAAD,CAAMS,IAAOT,EAAQC,GAAID,QAAWA,GAApC,OAAkDA,EAAQC,QCTrDS,G,MAAY,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,YAAYC,EAAgB,EAAhBA,aACnC,OACI,2BAAOd,UAAU,SAASe,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCoErEG,G,kBAjEb,aAAe,IAAD,8BACZ,+CAEKC,MAAQ,CACXC,SAAU,wBACVC,SAAU,GACVC,YAAa,IANH,E,iFAUO,IAAD,OAGlBC,MAAM,mCACLC,KAAM,SAAAC,GAAQ,OAAIA,EAASC,SAC3BF,KAAM,SAAAG,GACL,EAAKC,SAAS,CAACP,SAASM,IACxBlB,QAAQC,IAAIiB,O,+BAIN,IAAD,SAE0BE,KAAKV,MAA/BG,EAFA,EAEAA,YAEDQ,EAJC,EAEaT,SAEaU,OAC/B,SAAA5B,GAAO,OAAIA,EAAQE,KAAK2B,cAAcC,SAASX,EAAYU,iBAG7D,OAEA,yBAAK/B,UAAU,OACb,4BAAQA,UAAU,cACd,4BAAK4B,KAAKV,MAAMC,UAChB,wCAAcU,EAAgBnB,IAAK,SAAAR,GAAO,OAAGA,EAAQE,KAAK,OAC1D,kBAAC,EAAD,CAAWS,YAAY,iBAAiBC,aACtC,SAAAmB,GACE,EAAKN,SAAS,CAACN,YAAcY,EAAEC,OAAOC,WAM5C,4BAAQC,QAAW,kBAAM,EAAKT,SAAS,CAACR,SAAU,oBAAlD,4BAIA,kBAAC,EAAD,CAAUjB,QAAY2B,U,GAjDZQ,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC,iB","file":"static/js/main.8f3ac175.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.style.css'\r\n\r\nexport const Card = props => {\r\n    return <div className='card-container'>\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=120x160`}></img>\r\n        <h4> {props.monster.name} {props.children} x </h4>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n}","import React from 'react';\r\nimport './card-list.style.css'\r\nimport { Card } from '../card/card-components';\r\n\r\nexport const CardList = props  => {\r\n    console.log(props);\r\n    //print out values between <CardList> and </CardList>\r\n    //apply css class card-list to the <div>\r\n    //return <div className='card-list'>{ props.children} </div>;\r\n    return <div className='card-list'> \r\n    {   \r\n        props.monster.map( monster => (\r\n        <Card key = {monster.id} monster = {monster}> id={monster.id}</Card>\r\n    )\r\n\r\n    \r\n\r\n    )}\r\n     </div>;\r\n};\r\n","import React from 'react';\r\nimport './search-box.style.css'\r\n\r\nexport const SearchBox = ({placeholder,handlechange})=>{\r\n    return (        \r\n        <input className='search' type='search' placeholder={placeholder} onChange={handlechange}/>\r\n          \r\n    )\r\n}","import React, {Component} from 'react';\nimport { CardList } from './components/card-list/card-list.components';\nimport { Card } from './components/card/card-components';\nimport { SearchBox } from './components/search-box/search-box-components' \nimport './App.css';\n\nclass App extends Component{  //extends Component\n\n  constructor() {\n    super();  \n    //declarative state\n    this.state = {\n      greeting: 'Greeting, react world',\n      monsters: [],\n      searchvalue: ''\n    };\n  }\n\n  componentDidMount() {\n     //fetch a json user arrays and set to property monsters \n    //fetch('https://jsonplaceholder.typicode.com/users')\n    fetch('http://localhost:8080/json/user')\n    .then( response => response.json())\n    .then( users =>  {\n      this.setState({monsters:users});\n      console.log(users)\n    });\n  }\n\n  render() {\n    //copy searchvalue, monsters as 'destructed element'\n    const {searchvalue, monsters } = this.state; \n    //filter monster based on value entered into search box\n    const filteredMonster = monsters.filter( \n      monster => monster.name.toLowerCase().includes(searchvalue.toLowerCase())\n    );\n    //button is a built-in component, use setState() to change the property\n    return(\n     \n    <div className=\"App\">\n      <header className=\"App-header\">     \n          <h1>{this.state.greeting}</h1>\n          <h1>filter = {filteredMonster.map( monster =>monster.name+',' )}</h1>\n          <SearchBox placeholder='search monster' handlechange={\n            e=> {\n              this.setState({searchvalue : e.target.value })\n            }\n          }/>\n          \n          { /*this.state.monsters.map(monster => <h1> hello, {monster.name} </h1> )*/}\n         \n        <button onClick ={ () => this.setState({greeting: 'hello clicked'}) }>\n         click to change greeting \n        </button>\n        {/* pass monsters array to CardList as props*/}\n        <CardList monster = { filteredMonster}> \n          { /*\n            this.state.monsters.map(\n              monster => (                \n                <h1 key = {monster.id}> {monster.name}>>> </h1>                \n              )\n            )*/\n            \n          }\n        </CardList>\n        \n      </header>   \n         \n    </div>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
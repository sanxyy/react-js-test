{"version":3,"sources":["components/card/card-components.jsx","components/card-list/card-list.components.jsx","components/search-box/search-box-components.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monster","id","name","children","email","CardList","console","log","map","key","SearchBox","placeholder","handlechange","type","onChange","App","state","monsters","searchvalue","fetch","then","response","json","users","setState","this","filteredMonster","filter","toLowerCase","includes","greeting","e","target","value","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2TAGaA,G,YAAO,SAAAC,GAChB,OAAO,yBAAKC,UAAU,kBAClB,yBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACR,gCAAMJ,EAAMG,QAAQE,KAApB,IAA2BL,EAAMM,SAAjC,OACA,2BAAIN,EAAMG,QAAQI,UCHbC,EAAW,SAAAR,GAKpB,OAJAS,QAAQC,IAAIV,GAIL,yBAAKC,UAAU,aAElBD,EAAMG,QAAQQ,IAAK,SAAAR,GAAO,OAC1B,kBAAC,EAAD,CAAMS,IAAOT,EAAQC,GAAID,QAAWA,GAApC,OAAkDA,EAAQC,QCTrDS,G,MAAY,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,YAAYC,EAAgB,EAAhBA,aACnC,OACI,2BAAOd,UAAU,SAASe,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCqErEG,G,kBAlEb,aAAe,IAAD,8BACZ,+CAEKC,MAAQ,CACXC,SAAU,GACVC,YAAa,IALH,E,iFASO,IAAD,OAElBC,MAAM,8CAELC,KAAM,SAAAC,GAAQ,OAAIA,EAASC,SAC3BF,KAAM,SAAAG,GACL,EAAKC,SAAS,CAACP,SAASM,IACxBjB,QAAQC,IAAIgB,O,+BAIN,IAAD,SAE0BE,KAAKT,MAA/BE,EAFA,EAEAA,YAEDQ,EAJC,EAEaT,SAEaU,OAC/B,SAAA3B,GAAO,OAAIA,EAAQE,KAAK0B,cAAcC,SAASX,EAAYU,iBAG7D,OAEA,yBAAK9B,UAAU,OACb,4BAAQA,UAAU,cACd,4BAAK2B,KAAKT,MAAMc,UAChB,4CAEA,kBAAC,EAAD,CAAWnB,YAAY,iBAAiBC,aACtC,SAAAmB,GACE,EAAKP,SAAS,CAACN,YAAca,EAAEC,OAAOC,WAM5C,4BAAQC,QAAW,kBAAM,EAAKV,SAAS,CAACM,SAAU,oBAAlD,4BAIA,kBAAC,EAAD,CAAU9B,QAAY0B,U,GAjDZS,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC,iB","file":"static/js/main.bf12ec20.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.style.css'\r\n\r\nexport const Card = props => {\r\n    return <div className='card-container'>\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=120x160`}></img>\r\n        <h4> {props.monster.name} {props.children} x </h4>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n}","import React from 'react';\r\nimport './card-list.style.css'\r\nimport { Card } from '../card/card-components';\r\n\r\nexport const CardList = props  => {\r\n    console.log(props);\r\n    //print out values between <CardList> and </CardList>\r\n    //apply css class card-list to the <div>\r\n    //return <div className='card-list'>{ props.children} </div>;\r\n    return <div className='card-list'> \r\n    {   \r\n        props.monster.map( monster => (\r\n        <Card key = {monster.id} monster = {monster}> id={monster.id}</Card>\r\n    )\r\n\r\n    \r\n\r\n    )}\r\n     </div>;\r\n};\r\n","import React from 'react';\r\nimport './search-box.style.css'\r\n\r\nexport const SearchBox = ({placeholder,handlechange})=>{\r\n    return (        \r\n        <input className='search' type='search' placeholder={placeholder} onChange={handlechange}/>\r\n          \r\n    )\r\n}","import React, {Component} from 'react';\r\nimport { CardList } from './components/card-list/card-list.components';\r\nimport { Card } from './components/card/card-components';\r\nimport { SearchBox } from './components/search-box/search-box-components' \r\nimport './App.css';\r\n\r\nclass App extends Component{  //extends Component\r\n\r\n  constructor() {\r\n    super();  \r\n    //declarative state\r\n    this.state = {\r\n      monsters: [],\r\n      searchvalue: ''\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n     //fetch a json user arrays and set to property monsters \r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    //fetch('http://localhost:8080/json/user')\r\n    .then( response => response.json())\r\n    .then( users =>  {\r\n      this.setState({monsters:users});\r\n      console.log(users)\r\n    });\r\n  }\r\n\r\n  render() {\r\n    //copy searchvalue, monsters as 'destructed element'\r\n    const {searchvalue, monsters } = this.state; \r\n    //filter monster based on value entered into search box\r\n    const filteredMonster = monsters.filter( \r\n      monster => monster.name.toLowerCase().includes(searchvalue.toLowerCase())\r\n    );\r\n    //button is a built-in component, use setState() to change the property\r\n    return(\r\n     \r\n    <div className=\"App\">\r\n      <header className=\"App-header\">     \r\n          <h1>{this.state.greeting}</h1>\r\n          <h1>Monster roll</h1>\r\n          {/*<h1>filter = {filteredMonster.map( monster =>monster.name+',' )}</h1>*/}\r\n          <SearchBox placeholder='search monster' handlechange={\r\n            e=> {\r\n              this.setState({searchvalue : e.target.value })\r\n            }\r\n          }/>\r\n          \r\n          { /*this.state.monsters.map(monster => <h1> hello, {monster.name} </h1> )*/}\r\n         \r\n        <button onClick ={ () => this.setState({greeting: 'hello clicked'}) }>\r\n         click to change greeting \r\n        </button>\r\n        {/* pass monsters array to CardList as props*/}\r\n        <CardList monster = { filteredMonster}> \r\n          { /*\r\n            this.state.monsters.map(\r\n              monster => (                \r\n                <h1 key = {monster.id}> {monster.name}>>> </h1>                \r\n              )\r\n            )*/\r\n            \r\n          }\r\n        </CardList>\r\n        \r\n      </header>   \r\n         \r\n    </div>\r\n    )\r\n  };\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}